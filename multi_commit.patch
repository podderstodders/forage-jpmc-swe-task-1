From c758a53e0d95d4945310e7a41d849644e655d376 Mon Sep 17 00:00:00 2001
From: Richard Vu <richardvu0710@gmail.com>
Date: Thu, 11 Apr 2024 02:42:20 -0700
Subject: [PATCH 1/2] completed task1

---
 .gitignore |  2 ++
 client3.py | 10 +++++++---
 2 files changed, 9 insertions(+), 3 deletions(-)
 create mode 100644 .gitignore

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..879384c
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+.venv/
+helper.md
\ No newline at end of file
diff --git a/client3.py b/client3.py
index 3fc09b7..ed74ffd 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,16 @@ def getDataPoint(quote):
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price+ask_price)/2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if(price_b == 0):
+        return
+    return price_a/price_b
 
 
 # Main
@@ -52,8 +54,10 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices={}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
-- 
2.34.1


From c7a3dec23d5547e13bef1933de838d22ad599cb6 Mon Sep 17 00:00:00 2001
From: Richard Vu <richardvu0710@gmail.com>
Date: Thu, 11 Apr 2024 21:10:45 -0700
Subject: [PATCH 2/2] add more unit test

---
 .gitignore     |  5 ++++-
 client_test.py | 25 ++++++++++++++++++++++---
 2 files changed, 26 insertions(+), 4 deletions(-)

diff --git a/.gitignore b/.gitignore
index 879384c..edd1272 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,5 @@
 .venv/
-helper.md
\ No newline at end of file
+helper.md
+
+__pycache__/
+*.pyc 
\ No newline at end of file
diff --git a/client_test.py b/client_test.py
index af2bf26..ef45e48 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,6 @@
 import unittest
 from client3 import getDataPoint
+from client3 import getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,18 +9,36 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
       {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    """ ------------ Add the assertion below ------------ """
-
+    """ ------------ Add the assertion below ------------ """ 
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
 
   """ ------------ Add more unit tests ------------ """
+  def test_getRatio__bestcase(self):
+    self.assertEqual(getRatio(12, 2), 6)
+    self.assertEqual(getRatio(-12, 2), -6)
+    self.assertEqual(getRatio(12, -2), -6)
+    self.assertEqual(getRatio(-12, -2), 6)
 
+  def test__getRatio__divisionByZero(self):
+    self.assertIsNone(getRatio(10, 0))
 
-
+  def test__getRatio__zeroNumerator(self):
+    self.assertEqual(getRatio(0, 100), 0)
+  
+  def test_getRatio__floatingNums(self):
+    self.assertAlmostEqual(getRatio(6.9, 2.3), 3.0)
+    self.assertAlmostEqual(getRatio(-6.9, 2.3), -3.0)
+    self.assertAlmostEqual(getRatio(6.9, -2.3), -3.0)
+    self.assertAlmostEqual(getRatio(-6.9, -2.3), 3.0)
+  
 if __name__ == '__main__':
     unittest.main()
-- 
2.34.1

